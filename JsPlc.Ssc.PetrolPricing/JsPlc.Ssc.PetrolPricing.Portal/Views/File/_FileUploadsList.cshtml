@using System.Globalization
@using JsPlc.Ssc.PetrolPricing.Portal.Helper.Extensions
@model IEnumerable<JsPlc.Ssc.PetrolPricing.Models.ViewModels.FileUploadViewModel>

@{ 
    var statusMarkup = new Dictionary<string, string>()
    {
        {"Calculating", "<span class='label label-info'><i class='fa fa-calculator'></i> Calculating</span>" },
        {"Failed", "<span class='label label-danger'><i class='fa fa-times-circle'></i> Failed</span>" },
        {"Processing", "<span class='label label-success'><i class='fa fa-fa-cog'></i> Processing</span>" },
        {"Success", "<span class='label label-success'><i class='fa fa-check-circle'></i> Success</span>" },
        {"Uploaded", "<span class='label label-info'><i class='fa fa-upload'></i> Uploaded</span>" },
        {"Warning", "<span class='label label-warning'><i class='fa fa-warning'></i> Warning</span>" }
    };

    var previousDaysAgo = -1;
}

@if (Model != null && Model.Any())
{
    <table class="table table-striped">
        @foreach (var item in Model)
        {
            var daysAgo = (int)DateTime.Now.Date.Subtract(item.UploadDateTime.Date).TotalDays;
            var wasToday = daysAgo < 1;
            var wasYesterday = daysAgo == 1;
            var friendlyDaysAgo = wasToday ? "Today" : wasYesterday ? "Yesterday" : daysAgo + " Days ago";
            var rowClass = (wasToday ? "uploaded-today" : wasYesterday ? "uploaded-yesterday" : "")
                + (item.FileExists ? " upload-file-exists" : " no-upload-file")
                + (item.IsMostRecentForDate ? " most-recent-for-date" : " older-file");

            if (item.IsForDifferentDay)
            {
                <tr class="date-row">
                    <td colspan="8"><h4><i class="fa fa-calendar"></i> &nbsp;&nbsp; @(item.UploadDateTime.Date.ToString("dd-MMM-yyy")) &mdash; @(friendlyDaysAgo)</h4></td>
                </tr>

                <tr class="header-row">
                    <th>
                        File
                    </th>

                    <th>
                        @Html.DisplayNameFor(model => model.OriginalFileName)
                    </th>
                    <th></th>
                    <th>
                        @Html.DisplayNameFor(model => model.UploadType.UploadTypeName)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.UploadDateTime)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Status.Status)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.UploadedBy)
                    </th>
                    <th></th>
                </tr>
            }

            <tr class="@rowClass.Trim()">
                <td>
                    @if (item.FileExists)
                    {
                        <a class="text-success" href="@(Url.Action("Download", "File"))/@item.Id" data-infotip="Download the file [b]@(item.OriginalFileName)[/b]"><i class="fa fa-file"></i></a>
                    }
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.OriginalFileName)
                </td>
                <td>
                    @if (item.IsMostRecentForDate)
                    {
                        <i class="fa fa-star" data-infotip="Most Recent File"></i>
                    }
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.UploadType.UploadTypeName)
                </td>
                <td data-infotip="Uploaded on [b]@(item.UploadDateTime.ToString("dd-MMM-yyyy"))[/b] at [b]@(item.UploadDateTime.ToString("HH:mm:ss"))[/b]">
                    @if (wasToday || wasYesterday)
                    {
                        <strong>@Html.FormatFriendlyDateTime(item.UploadDateTime)</strong>
                    }
                    else
                    {
                        @Html.FormatFriendlyDateTime(item.UploadDateTime)
                    }
                </td>
                <td>
                    @if (statusMarkup.ContainsKey(item.Status.Status))
                    {
                        @Html.Raw(statusMarkup[item.Status.Status])
                    }
                    else
                    {
                        <span class='label label-warning'><i class='fa fa-warning'></i> @item.Status.Status</span>
                    }
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.UploadedBy)
                </td>
                <td>
                    <a class="btn btn-primary btn-xs" href="@Url.Action("Details", "File")/@item.Id" data-infotip="View File Upload Details">Details</a>
                </td>
            </tr>
        }
    </table>
}
else
{
    <div class="alert alert-info">No files uploaded yet</div>
}
