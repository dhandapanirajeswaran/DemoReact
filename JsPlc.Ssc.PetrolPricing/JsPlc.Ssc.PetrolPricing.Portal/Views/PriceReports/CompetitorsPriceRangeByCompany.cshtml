@model JsPlc.Ssc.PetrolPricing.Models.ViewModels.CompetitorsPriceRangeByCompanyViewModel
@{
    ViewBag.Title = "Report - Competitors Price Range by company";
    var hasData = (Model != null && Model.ReportCompanies[0].Brands.Count > 0);

}

<style>
    .actualdata {
        height: 500px;
        overflow-y: auto;
        overflow-x: hidden;
    }

    .alternativerow:nth-child(2n+1) {
        background: #F5F5F5;
    }

    .alternativerow {
        border-bottom: 1px solid #b9b2b2;
    }
</style>
<div class="row">
    <div class="col-md-6">
        <h1><i class="fa fa-bar-chart"></i> @ViewBag.Title.</h1>
    </div>
    <div class="col-md-6 text-right" style="padding-top: 20px">
        @if (Model != null && Model.ReportCompanies.Any())
        {
            using (Html.BeginForm("ExportCompetitorsPriceRangeByCompany", "PriceReports", FormMethod.Get))
            {
                if (hasData)
                {
                    <button type="submit" id="btnExportReport" class="btn btn-primary"><i class="fa fa-download"></i> Export to Excel</button>
                }
                else
                {
                    <button type="submit" id="btnExportReport" class="btn btn-primary" disabled="disabled"><i class="fa fa-download"></i> Export to Excel</button>
                }
                <input type="hidden" id="DateForCopy" name="DateFor" />
                <input type="hidden" id="SelectedCompanyNameCopy" name="SelectedCompanyName" />
                <input type="hidden" id="SelectedBrandNameCopy" name="SelectedBrandName" />
            }
        }
    </div>
</div>
<hr />
@if (Model != null)
{
    using (Html.BeginForm("CompetitorsPriceRangeByCompany", "PriceReports", FormMethod.Get))
    {
        <div class="row">
            <div class="col-md-2">
                <label for="DateFor">When:</label>
                <input type="text" class="datepicker form-control" id="DateFor" name="DateFor" value="@Model.Date.ToString("dd-MMM-yyyy")">
            </div>
            <div class="col-md-2">
                <label for="SelectedCompanyName">Company:</label>
                @Html.DropDownListFor(d => d.SelectedCompanyName, Model.Companies.Select(b => new SelectListItem { Value = b.Key, Text = string.Format("{0} ({1})", b.Key, b.Value), Selected = b.Key == Model.SelectedCompanyName }), null, new { @class = "form-control" })
            </div>
            <div class="col-md-2">
                <label for="SelectedBrandName">Brand:</label>
                @Html.DropDownListFor(d => d.SelectedBrandName, Model.Brands.Select(b => new SelectListItem { Value = b, Text = b, Selected = b == Model.SelectedBrandName }), null, new { @class = "form-control" })
            </div>
            <div class="col-md-1" style="padding-top: 1.74em">
                <button type="submit" class="btn btn-success btn-block" id="btnViewReport">View</button>
            </div>
            <div class="col-md-1" style="padding-top: 1.74em">
                <button type="button" class="btn btn-danger btn-block" id="btnResetReport">Reset</button>
            </div>
        </div>
        <hr />
    }
}
@if (Model != null && Model.ReportCompanies[0].Brands.Count > 0)
{
    <!-- Report Data -->

    <div class="divtable">

        <div class="row">
            <div class="col-md-2" style="width:280px"></div>
            <div class="col-md-2" style="width:270px; text-align:center;"><strong>Avg retails</strong></div>
            <div class="col-md-2" style="width:270px;text-align:center;">
                <strong>Difference</strong>
            </div>
            <div class="col-md-2" style="width:270px; text-align:center;">
                <strong>Pricing range</strong>
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col-md-1" style="width:280px"><strong>@Model.Date.ToString("dd-MMM-yyyy")</strong></div>
            @for (int i = 0; i < 3; i++)
            {
                foreach (var fuelType in Model.FuelTypes)
                {
                    <div class="col-md-1" style="width:140px"><strong>@fuelType.FuelTypeName</strong></div>
                }
            }
        </div>
        <hr />
        <div class="actualdata">
            @foreach (var company in Model.ReportCompanies)
            {
                if (company.Brands.Any() == false)
                {
                    continue;
                }
                <div class="alternativerow">
                    <div class="row" style="width:1120px">
                        <div class="col-md-5">
                            <strong>@company.CompanyName</strong>
                        </div>
                    </div>
                    @foreach (var brand in company.Brands)
                    {
                        <div class="row">
                            <div class="col-md-1" style="width:280px">@(brand.BrandName) (£)</div>
                            @* Average *@
                            @foreach (var fuelType in Model.FuelTypes)
                            {
                                var fuelBrand = brand.Fuels.FirstOrDefault(f => f.FuelTypeId == fuelType.Id);
                                if (fuelBrand == null)
                                {
                                    <div class="col-md-1" style="width:140px">n/a</div>
                                }
                                else
                                {
                                    <div class="col-md-1" style="width:140px">@((fuelBrand.Average / 10.0).ToString("###0.0"))</div>
                                }
                            }
                            @* Difference *@
                            @foreach (var fuelType in Model.FuelTypes)
                            {
                                var fuelBrand = brand.Fuels.FirstOrDefault(f => f.FuelTypeId == fuelType.Id);

                                if (fuelBrand == null || Model.SainsburysPrices.ContainsKey(fuelType.Id) == false)
                                {
                                    <div class="col-md-1" style="width:140px">n/a</div>
                                }
                                else
                                {
                                    int diff = fuelBrand.Average > 0 ? (fuelBrand.Average - Model.SainsburysPrices[fuelType.Id]) : 0;
                                    string color = "";
                                    if (diff < 0)
                                    {
                                        color = "red";
                                    }
                                    else if (diff > 0)
                                    {
                                        color = "green";
                                    }
                                    <div class="col-md-1" style="color: @color;width:140px">@((diff / 10.0).ToString("###0.0"))</div>
                                }
                            }
                            @* Range *@
                            @foreach (var fuelType in Model.FuelTypes)
                            {
                                var fuelBrand = brand.Fuels.FirstOrDefault(f => f.FuelTypeId == fuelType.Id);
                                if (fuelBrand == null)
                                {
                                    <div class="col-md-1" style="width:140px">n/a</div>
                                }
                                else
                                {
                                    <div class="col-md-1" style="width:140px">@((fuelBrand.Min / 10.0).ToString("###0.0")) - @((fuelBrand.Max / 10.0).ToString("###0.0"))</div>
                                }
                            }
                        </div>
                    }
                </div>



            }
        </div>

    </div>
}
else
{
    <div class="alert alert-info" role="alert">No data found at @Model.Date.ToString("dd-MMM-yyyy")</div>
}

@Html.Partial("_BackToReports")

@section scripts {
    <script src="~/Scripts/pricereports/CompetitorsPriceRangeByCompany.js"></script>
}
